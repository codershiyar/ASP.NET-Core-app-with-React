// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WDPRTheaterGroep8.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230119202839_update4")]
    partial class update4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Artiest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Afbeelding")
                        .HasColumnType("TEXT");

                    b.Property<string>("Naam")
                        .HasColumnType("TEXT");

                    b.Property<string>("Omschrijving")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TypeID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VoorstellingID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.HasIndex("VoorstellingID");

                    b.ToTable("Artiesten");
                });

            modelBuilder.Entity("ArtiestType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("ArtiestTypes");
                });

            modelBuilder.Entity("DatumEnTijdRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Eind")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("DatumEnTijdRanges");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Rang", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rangnummer")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Rangen");
                });

            modelBuilder.Entity("Reservering", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GeplaatstDoorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GereserveerdRuimteID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Kosten")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReserveringDatumEnTijdID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TijdVanAankoop")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("GeplaatstDoorId");

                    b.HasIndex("GereserveerdRuimteID");

                    b.HasIndex("ReserveringDatumEnTijdID");

                    b.ToTable("Reserveringen");
                });

            modelBuilder.Entity("Ruimte", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capaciteit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WaarvoorGeschikt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Ruimtes");
                });

            modelBuilder.Entity("Stoel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoelRangID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ZaalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("StoelRangID");

                    b.HasIndex("ZaalID");

                    b.ToTable("Stoelen");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Kosten")
                        .HasColumnType("TEXT");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketStoelID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TijdVanAankoop")
                        .HasColumnType("TEXT");

                    b.Property<int>("voorstellingID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("TicketStoelID");

                    b.HasIndex("voorstellingID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Voorstelling", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Omschrijving")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Prijs")
                        .HasColumnType("TEXT");

                    b.Property<string>("Titel")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VoorstellingDatumEnTijdID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VoorstellingZaalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("VoorstellingDatumEnTijdID");

                    b.HasIndex("VoorstellingZaalID");

                    b.ToTable("Voorstellingen");
                });

            modelBuilder.Entity("Zaal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Zalen");
                });

            modelBuilder.Entity("Gebruiker", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateOnly?>("Geboortedatum")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Imagedata")
                        .HasColumnType("BLOB");

                    b.Property<string>("Naam")
                        .HasColumnType("TEXT");

                    b.Property<string>("Omschrijving")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Gebruiker");
                });

            modelBuilder.Entity("Artiest", b =>
                {
                    b.HasOne("ArtiestType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID");

                    b.HasOne("Voorstelling", null)
                        .WithMany("Artiesten")
                        .HasForeignKey("VoorstellingID");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reservering", b =>
                {
                    b.HasOne("Gebruiker", "GeplaatstDoor")
                        .WithMany()
                        .HasForeignKey("GeplaatstDoorId");

                    b.HasOne("Ruimte", "GereserveerdRuimte")
                        .WithMany()
                        .HasForeignKey("GereserveerdRuimteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatumEnTijdRange", "ReserveringDatumEnTijd")
                        .WithMany()
                        .HasForeignKey("ReserveringDatumEnTijdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeplaatstDoor");

                    b.Navigation("GereserveerdRuimte");

                    b.Navigation("ReserveringDatumEnTijd");
                });

            modelBuilder.Entity("Stoel", b =>
                {
                    b.HasOne("Rang", "StoelRang")
                        .WithMany()
                        .HasForeignKey("StoelRangID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zaal", "Zaal")
                        .WithMany()
                        .HasForeignKey("ZaalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoelRang");

                    b.Navigation("Zaal");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.HasOne("Stoel", "TicketStoel")
                        .WithMany()
                        .HasForeignKey("TicketStoelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voorstelling", "voorstelling")
                        .WithMany()
                        .HasForeignKey("voorstellingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketStoel");

                    b.Navigation("voorstelling");
                });

            modelBuilder.Entity("Voorstelling", b =>
                {
                    b.HasOne("DatumEnTijdRange", "VoorstellingDatumEnTijd")
                        .WithMany()
                        .HasForeignKey("VoorstellingDatumEnTijdID");

                    b.HasOne("Zaal", "VoorstellingZaal")
                        .WithMany()
                        .HasForeignKey("VoorstellingZaalID");

                    b.Navigation("VoorstellingDatumEnTijd");

                    b.Navigation("VoorstellingZaal");
                });

            modelBuilder.Entity("Voorstelling", b =>
                {
                    b.Navigation("Artiesten");
                });
#pragma warning restore 612, 618
        }
    }
}
